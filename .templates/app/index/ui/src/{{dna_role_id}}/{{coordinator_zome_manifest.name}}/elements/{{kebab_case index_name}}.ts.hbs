import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, AgentPubKey, EntryHash, ActionHash, Record, AppWebsocket, InstalledAppInfo } from '@holochain/client';
import { contextProvided } from '@lit-labs/context';
import { TaskSubscriber } from 'lit-svelte-stores';
import { CircularProgress } from '@scoped-elements/material-web';
import { ScopedElementsMixin } from '@open-wc/scoped-elements';

import { {{pascal_case referenceable.name}} } from './{{kebab_case referenceable.name}}-detail';
import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context';

export class {{pascal_case index_name}} extends ScopedElementsMixin(LitElement) {
  {{#if (eq index_type.type "ByAuthor")}}

  @property({
    hasChanged: (newVal: AgentPubKey, oldVal: AgentPubKey) => newVal.toString() !== oldVal.toString()
  })
  author!: AgentPubKey;
  {{/if}}
  
  @contextProvided({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;

  _fetch{{pascal_case index_name}} = new TaskSubscriber(this, 
    ([{{#if (eq index_type.type "ByAuthor")}}author{{/if}}]) => this.{{camel_case coordinator_zome_manifest.name}}Store.fetch{{pascal_case index_name}}({{#if (eq index_type.type "ByAuthor")}}author{{else}}{{/if}}), 
    () => [{{#if (eq index_type.type "ByAuthor")}}this.author{{/if}}]
  );

  renderList(hashes: Array<{{referenceable.hash_type}}>) {
    if (hashes.length === 0) return html`<span>No {{lower_case (plural referenceable.name)}} found.</span>`;
    
    return html`
      <div style="display: flex; flex-direction: column">
        ${hashes.map(hash => 
          html`<{{kebab_case referenceable.name}}-detail .{{camel_case referenceable.name}}Hash=${hash} style="margin-bottom: 16px;"></{{kebab_case referenceable.name}}-detail>`
        )}
      </div>
    `;
  }

  render() {
    return this._fetch{{pascal_case index_name}}.render({
      pending: () => html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
        <mwc-circular-progress indeterminate></mwc-circular-progress>
      </div>`,
      complete: (hashes) => this.renderList(hashes),
      error: (e: any) => html`<span>Error fetching the {{lower_case (plural referenceable.name)}}: ${e.data.data}.</span>`
    });
  }

  static get scopedElements() {
    return {
      'mwc-circular-progress': CircularProgress,
      '{{kebab_case referenceable.name}}-detail': {{pascal_case referenceable.name}}Detail
    };
  }
}
