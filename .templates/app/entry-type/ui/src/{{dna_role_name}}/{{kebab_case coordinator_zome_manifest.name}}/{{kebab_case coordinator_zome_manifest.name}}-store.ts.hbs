import { {{pascal_case entry_type.name}} } from './types.js';

{{#merge_scope previous_file_content (concat "export class " (pascal_case coordinator_zome_manifest.name) "Store {" ) }}
  {{previous_scope_content}}
  
  /** {{title_case entry_type.name}} */

  {{camel_case (plural entry_type.name)}} = new LazyHoloHashMap(({{camel_case entry_type.name}}Hash: {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}) => ({
      {{#if crud.update}}
      latestVersion: latestVersionOfEntryStore(this.client, () => this.client.getLatest{{pascal_case entry_type.name}}({{camel_case entry_type.name}}Hash)),
      {{else}}
      entry: imutableEntryStore(this.client.get{{pascal_case entry_type.name}}({{camel_case entry_type.name}}Hash)),
      {{/if}}
      {{#if crud.delete}}
      deletes: deletesForEntryStore(this.client, {{camel_case entry_type.name}}Hash, () => this.client.getAllDeletesFor{{pascal_case entry_type.name}}({{camel_case entry_type.name}}Hash)),
      {{/if}}
    })
  );

  {{#each entry_type.fields}}
    {{#if linked_from}}
  {{camel_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}} = new LazyHoloHashMap(({{camel_case linked_from.singular_arg}}: {{#if ../entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}) =>
    liveLinksTargetsStore(
      this.client,
      {{camel_case linked_from.singular_arg}},
      () => this.client.get{{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}({{camel_case linked_from.singular_arg}}),
      '{{pascal_case linked_from.name}}To{{pascal_case (plural ../entry_type.name)}}'
    )
  );

    {{/if}}
  {{/each}}
  
{{/merge_scope}}
