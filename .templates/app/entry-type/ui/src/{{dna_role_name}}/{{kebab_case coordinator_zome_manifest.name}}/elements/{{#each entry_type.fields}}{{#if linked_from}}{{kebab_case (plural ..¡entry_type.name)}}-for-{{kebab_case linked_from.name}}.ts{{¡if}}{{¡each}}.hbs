import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { Record, EntryHash, ActionHash, AgentPubKey } from '@holochain/client';
import { StoreSubscriber } from '@holochain-open-dev/stores';
import { RecordBag, EntryRecord } from '@holochain-open-dev/utils';
import { hashProperty, sharedStyles, DisplayError } from '@holochain-open-dev/elements';
import { consume } from '@lit-labs/context';
import { CircularProgress } from '@scoped-elements/material-web';
import { ScopedElementsMixin } from '@open-wc/scoped-elements';
import { localized, msg } from '@lit/localize';

import { {{pascal_case ../coordinator_zome_manifest.name}}Store } from '../{{kebab_case ../coordinator_zome_manifest.name}}-store';
import { {{camel_case ../coordinator_zome_manifest.name}}StoreContext } from '../context';
import { {{pascal_case ../entry_type.name}} } from '../types';

{{#if (not (eq linked_from.hash_type "AgentPubKey") )}}
import { {{pascal_case ../entry_type.name}}Detail } from './{{kebab_case ../entry_type.name}}-detail';
{{else}}
import { AgentAvatar } from '@holochiain-open-dev/profiles';
{{/if}}

@localized()
export class {{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}} extends ScopedElementsMixin(LitElement) {

  // REQUIRED. The {{pascal_case linked_from.singular_arg}} for which the {{pascal_case (plural ../entry_type.name)}} should be fetched
  @property(hashProperty('{{kebab_case linked_from.singular_arg}}'))
  {{camel_case linked_from.singular_arg}}!: {{linked_from.hash_type}};

  /**
   * @internal
   */
  @consume({ context: {{camel_case ../coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case ../coordinator_zome_manifest.name}}Store!: {{pascal_case ../coordinator_zome_manifest.name}}Store;
  
  /**
   * @internal
   */
  _{{camel_case (plural ../entry_type.name)}} = new StoreSubscriber(this, () =>
    this.{{camel_case linked_from.singular_arg}}.{{camel_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}.get(this.{{camel_case linked_from.singular_arg}})
  );

  renderList(hashes: Array<{{#if ../entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}>) {
    if (hashes.length === 0) return html`<span>${msg("No {{lower_case (plural ../entry_type.name)}} found for this {{lower_case linked_from.name}}.")}</span>`;
    
    return html`
      <div style="display: flex; flex-direction: column">
        ${hashes.map(hash =>
          html`<{{kebab_case ../entry_type.name}}-detail .{{camel_case ../entry_type.name}}Hash=${hash}></{{kebab_case ../entry_type.name}}-detail>`
        )}
      </div>
    `;
  }

  render() {
    switch (this._{{camel_case (plural ../entry_type.name)}}.value.status) {
      case "pending":
        return html`<div
          style="display: flex; flex: 1; align-items: center; justify-content: center"
        >
          <mwc-circular-progress indeterminate></mwc-circular-progress>
        </div>`;
      case "complete": 
        return this.renderList(this._{{camel_case (plural ../entry_type.name)}}.value.value);
      case "error":
        return html`<display-error .error=${._{{camel_case (plural ../entry_type.name)}}.value.error.data.data}></display-error>`;
    }
  
    return this._fetch{{pascal_case (plural ../entry_type.name)}}.render({
      pending: () => html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
        <mwc-circular-progress indeterminate></mwc-circular-progress>
      </div>`,
      complete: (hashes) => this.renderList(hashes),
      error: (e: any) => html`<span>${msg("Error fetching {{lower_case (plural ../entry_type.name)}}")}: ${e.data.data}.</span>`
    });
  }
  
  static get scopedElements() {
    return {
      'mwc-circular-progress': CircularProgress,
      'display-error': DisplayError,
    {{#if (not (eq linked_from.hash_type "AgentPubKey") )}}
      '{{kebab_case ../entry_type.name}}-detail': {{pascal_case ../entry_type.name}}Detail
    {{else}}
      'agent-avatar': AgentAvatar
    {{/if}}
    };
  }
  
  static styles = [sharedStyles];
}
