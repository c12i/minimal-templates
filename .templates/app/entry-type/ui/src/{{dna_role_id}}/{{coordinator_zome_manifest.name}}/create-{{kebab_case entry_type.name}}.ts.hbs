import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, ActionHash, Record, AgentPubKey, EntryHash, AppWebsocket, InstalledAppInfo } from '@holochain/client';
import { contextProvided } from '@lit-labs/context';
import '@material/mwc-button';
import { Snackbar } from '@material/mwc-snackbar';
{{#each entry_type.fields}}
{{> (concat field_type "/" widget "/create/imports") }}
{{/each}}

import { appWebsocketContext, appInfoContext } from '../../contexts';
import { {{pascal_case entry_type.name}} } from './types';

@customElement('create-{{kebab_case entry_type.name}}')
export class Create{{pascal_case entry_type.name}} extends LitElement {
  {{#each entry_type.fields}}
    {{#if (not widget) }}
      {{#if (not (eq cardinality "vector" ) )}}
  @property()
  {{camel_case field_name}}!: {{> (concat field_type "/type") }};

      {{else}}
  @property()
  {{camel_case field_name}}!: Array<{{> (concat field_type "/type") }}>;

      {{/if}}
    {{/if}}
  {{/each}}

  {{#each entry_type.fields}}
    {{#if widget }}
      {{#if (not (eq cardinality "vector" ) )}}
  @state()
  _{{camel_case field_name}}: {{> (concat field_type "/type") }} | undefined;

      {{else}}
  @state()
  _{{camel_case field_name}}: Array<{{> (concat field_type "/type") }} | undefined> = [];

      {{/if}}
    {{/if}}
  {{/each}}

  is{{pascal_case entry_type.name}}Valid() {
    return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && this._{{camel_case field_name}}{{/if}}{{#if (eq cardinality "vector")}} && this._{{camel_case field_name}}.all(e => e !== undefined){{/if}}{{/if}}{{/each}};
  }

  @contextProvided({ context: appWebsocketContext })
  appWebsocket!: AppWebsocket;

  @contextProvided({ context: appInfoContext })
  appInfo!: InstalledAppInfo;

  async create{{pascal_case entry_type.name}}() {
    const cellData = this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === '{{dna_role_id}}')!;

    const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = { 
    {{#each entry_type.fields}}
      {{#if widget}}
        {{#if (eq cardinality "single") }}
        {{snake_case field_name}}: this._{{camel_case field_name}}!,
        {{else}}
        {{snake_case field_name}}: this._{{camel_case field_name}},
        {{/if}}
      {{/if}}
    {{/each}}
    {{#each entry_type.fields}}
      {{#if (not widget)}}
        {{snake_case field_name}}: this.{{camel_case field_name}},
      {{/if}}
    {{/each}}
    };

    try {
      const record: Record = await this.appWebsocket.callZome({
        cap_secret: null,
        cell_id: cellData.cell_id,
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'create_{{snake_case entry_type.name}}',
        payload: {{camel_case entry_type.name}},
        provenance: cellData.cell_id[1]
      });

      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-created', {
        composed: true,
        bubbles: true,
        detail: {
          {{camel_case entry_type.name}}Hash: record.signed_action.hashed.hash
        }
      }));
    } catch (e: any) {
      const errorSnackbar = this.shadowRoot?.getElementById('create-error') as Snackbar;
      errorSnackbar.labelText = `Error creating the {{lower_case entry_type.name}}: ${e.data.data}`;
      errorSnackbar.show();
    }
  }

  render() {
    return html`
      <mwc-snackbar id="create-error" leading>
      </mwc-snackbar>

      <div style="display: flex; flex-direction: column">
        <span style="font-size: 18px">Create {{title_case entry_type.name}}</span>

        {{#each entry_type.fields}}
          {{#if widget}}
            {{#if (not (eq cardinality "vector") )}}
        {{> (concat field_type "/" widget "/edit/render") label=(title_case field_name) variable_to_change=(concat "this._" (camel_case field_name) ) }}
            {{else}}
        {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
            {{/if}}
          {{/if}}

        {{/each}}

        <mwc-button 
          raised
          label="Create {{pascal_case entry_type.name}}"
          .disabled=${!this.is{{pascal_case entry_type.name}}Valid()}
          @click=${() => this.create{{pascal_case entry_type.name}}()}
        ></mwc-button>
    </div>`;
  }
}
