import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, AppWebsocket, EntryHash, Record, ActionHash, InstalledAppInfo } from '@holochain/client';
import { contextProvided } from '@lit-labs/context';
import { Task } from '@lit-labs/task';
import { decode } from '@msgpack/msgpack';
import '@material/mwc-circular-progress';
import '@material/mwc-icon-button';
import { Snackbar } from '@material/mwc-snackbar';
{{#each entry_type.fields}}
{{> (concat field_type "/" widget "/detail/imports") }}
{{/each}}
{{#if crud.update}}
import './edit-{{kebab_case entry_type.name}}';
{{/if}}

import { appInfoContext, appWebsocketContext } from '../../contexts';
import { {{pascal_case entry_type.name}} } from './types';

@customElement('{{kebab_case entry_type.name}}-detail')
export class {{pascal_case entry_type.name}}Detail extends LitElement {
  @property({
    hasChanged: (newVal: {{#if entry_type.fixed}}EntryHash{{else}}ActionHash{{/if}}, oldVal: {{#if entry_type.fixed}}EntryHash{{else}}ActionHash{{/if}}) => newVal.toString() !== oldVal.toString()
  })
  {{camel_case entry_type.name}}Hash!: {{#if entry_type.fixed}}EntryHash{{else}}ActionHash{{/if}};

  _fetchRecord = new Task(this, ([{{camel_case entry_type.name}}Hash]) => this.appWebsocket.callZome({
      cap_secret: null,
      cell_id: this.cellData.cell_id,
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case entry_type.name}}',
      payload: {{camel_case entry_type.name}}Hash,
      provenance: this.cellData.cell_id[1]
  }) as Promise<Record | undefined>, () => [this.{{camel_case entry_type.name}}Hash]);

  {{#if crud.update}}
  @state()
  _editing = false;
  {{/if}}

  @contextProvided({ context: appWebsocketContext })
  appWebsocket!: AppWebsocket;
  @contextProvided({ context: appInfoContext })
  appInfo!: InstalledAppInfo;

  get cellData() {
    return this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === '{{dna_role_id}}')!;
  }

  {{#if crud.delete}}
  async delete{{pascal_case entry_type.name}}() {
    try {
      await this.appWebsocket.callZome({
        cap_secret: null,
        cell_id: this.cellData.cell_id,
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'delete_{{snake_case entry_type.name}}',
        payload: this.{{camel_case entry_type.name}}Hash,
        provenance: this.cellData.cell_id[1]
      });
      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-deleted', {
        bubbles: true,
        composed: true,
        detail: {
          {{camel_case entry_type.name}}Hash: this.{{camel_case entry_type.name}}Hash
        }
      }));
      this._fetchRecord.run();
    } catch (e: any) {
      const errorSnackbar = this.shadowRoot?.getElementById('delete-error') as Snackbar;
      errorSnackbar.labelText = `Error deleting the {{lower_case entry_type.name}}: ${e.data.data}`;
      errorSnackbar.show();
    }
  }
  {{/if}}

  renderDetail(record: Record) {
    const {{camel_case entry_type.name}} = decode((record.entry as any).Present.entry) as {{pascal_case entry_type.name}};

    return html`{{#if crud.delete}}
      <mwc-snackbar id="delete-error" leading>
      </mwc-snackbar>
      {{/if}}

      <div style="display: flex; flex-direction: column">
      	<div style="display: flex; flex-direction: row">
          <span style="font-size: 18px; flex: 1;">{{title_case entry_type.name}}</span>

          {{#if crud.update}}
          <mwc-icon-button style="margin-left: 8px" icon="edit" @click=${() => { this._editing = true; } }></mwc-icon-button>
          {{/if}}
          {{#if crud.delete}}
          <mwc-icon-button style="margin-left: 8px" icon="delete" @click=${() => this.delete{{pascal_case entry_type.name}}()}></mwc-icon-button>
          {{/if}}
        </div>

	{{#each entry_type.fields}}
          {{#if widget}}	  
            {{#if (not (eq cardinality "vector") )}}
 	<div style="display: flex; flex-direction: row">
	  <span><strong>{{title_case field_name}}</strong></span>
 	  <span style="white-space: pre-line">{{> (concat field_type "/" widget "/detail/render") variable_to_read=(concat (camel_case ../entry_type.name) "." (snake_case field_name) ) }}</span>
	</div>
            {{else}}
          {{> Vec/detail/render variable_to_read=(concat (camel_case ../entry_type.name) "." (snake_case field_name) ) field_name=field_name field_type=field_type widget=widget }}
            {{/if}}

 	  {{/if}}
	{{/each}}
      </div>
    `;
  }
  
  render{{pascal_case entry_type.name}}(maybeRecord: Record | undefined) {
    if (!maybeRecord) return html`<span>The requested {{lower_case entry_type.name}} doesn't exist</span>`;
    
    {{#if crud.update}}
    if (this._editing) {
    	return html`<edit-{{kebab_case entry_type.name}}
          {{#if link_from_original_to_each_update}}
    	  .original{{pascal_case entry_type.name}}Hash=${this.{{camel_case entry_type.name}}Hash}
    	  {{/if}}
    	  .record=${maybeRecord}
    	  @{{kebab_case entry_type.name}}-updated=${async () => {
    	    this._editing = false;
    	    await this._fetchRecord.run();
    	  } }
    	  @edit-canceled=${() => { this._editing = false; } }
    	  style="display: flex; flex: 1;"
    	></edit-{{kebab_case entry_type.name}}>`;
    }

    {{/if}}
    return this.renderDetail(maybeRecord);
  }

  render() {
    return this._fetchRecord.render({
      pending: () => html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
        <mwc-circular-progress indeterminate></mwc-circular-progress>
      </div>`,
      complete: (maybeRecord) => this.render{{pascal_case entry_type.name}}(maybeRecord),
      error: (e: any) => html`<span>Error fetching the {{lower_case entry_type.name}}: ${e.data.data}</span>`
    });
  }
}
