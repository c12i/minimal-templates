import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, Record, AppWebsocket, EntryHash, ActionHash, InstalledAppInfo, AgentPubKey } from '@holochain/client';
import { contextProvided } from '@lit-labs/context';
import { Task } from '@lit-labs/task';

import { appWebsocketContext, appInfoContext } from '../../contexts';
import './{{kebab_case ../entry_type.name}}-detail';

@customElement('{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case referenceable.name}}')
export class {{pascal_case (plural ../entry_type.name)}}For{{pascal_case referenceable.name }} extends LitElement {

  @property({
    hasChanged: (newVal: {{referenceable.hash_type}}, oldVal: {{referenceable.hash_type}}) => newVal.toString() !== oldVal.toString()
  })
  {{camel_case referenceable.singular_arg}}!: {{referenceable.hash_type}};

  _fetch{{pascal_case (plural ../entry_type.name)}} = new Task(this, ([{{camel_case referenceable.singular_arg}}]) => this.appWebsocket.callZome({
      cap_secret: null,
      cell_id: this.cellData.cell_id,
      zome_name: '{{../coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case (plural ../entry_type.name)}}_for_{{snake_case referenceable.name}}',
      payload: {{camel_case referenceable.singular_arg}},
      provenance: this.cellData.cell_id[1]
  }) as Promise<Array<{{#if ../entry_type.fixed}}EntryHash{{else}}ActionHash{{/if}}>>, () => [this.{{camel_case referenceable.singular_arg}}]);

  @contextProvided({ context: appWebsocketContext })
  appWebsocket!: AppWebsocket;

  @contextProvided({ context: appInfoContext })
  appInfo!: InstalledAppInfo;

  get cellData() {
    return this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === '{{../dna_role_id}}')!;
  }

  renderList(hashes: Array<{{referenceable.hash_type}}>) {
    if (hashes.length === 0) return html`<span>No {{lower_case (plural ../entry_type.name)}} found for this {{lower_case referenceable.name}}.</span>`;
    
    return html`
      <div style="display: flex; flex-direction: column">
        ${hashes.map(hash =>
          html`<{{kebab_case ../entry_type.name}}-detail .{{camel_case ../entry_type.name}}Hash=${hash}></{{kebab_case ../entry_type.name}}-detail>`
        )}
      </div>
    `;
  }

  render() {
    return this._fetch{{pascal_case (plural ../entry_type.name)}}.render({
      pending: () => html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
        <mwc-circular-progress indeterminate></mwc-circular-progress>
      </div>`,
      complete: (hashes) => this.renderList(hashes),
      error: (e: any) => html`<span>Error fetching {{lower_case (plural ../entry_type.name)}}: ${e.data.data}.</span>`
    });
  }
}
