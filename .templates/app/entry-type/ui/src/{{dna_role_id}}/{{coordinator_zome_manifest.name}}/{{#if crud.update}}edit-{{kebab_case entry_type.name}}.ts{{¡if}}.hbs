import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, ActionHash, Record, AppWebsocket, InstalledAppInfo } from '@holochain/client';
import { contextProvided } from '@lit-labs/context';
import { decode } from '@msgpack/msgpack';
import '@material/mwc-button';
import { Snackbar } from '@material/mwc-snackbar';
{{#each entry_type.fields}}
{{> (concat field_type "/" widget "/create/imports") }}
{{/each}}

import { appWebsocketContext, appInfoContext } from '../../contexts';
import { {{pascal_case entry_type.name}} } from './types';

@customElement('edit-{{kebab_case entry_type.name}}')
export class Edit{{pascal_case entry_type.name}} extends LitElement {

  {{#if link_from_original_to_each_update}}
  @property({
      hasChanged: (newVal: ActionHash, oldVal: ActionHash) => newVal.toString() !== oldVal.toString()
  })
  original{{pascal_case entry_type.name}}Hash!: ActionHash;

  {{/if}}
  
  @property()
  record!: Record;
 
  get current{{pascal_case entry_type.name}}() {
    return decode((this.record.entry as any).Present.entry) as {{pascal_case entry_type.name}};
  }
 
  {{#each entry_type.fields}}
    {{#if widget }}
      {{#if (not (eq cardinality "vector" ) )}}
  @state()
  _{{camel_case field_name}}: {{> (concat field_type "/type") }} | undefined = this.current{{pascal_case ../entry_type.name}}.{{snake_case field_name}};

      {{else}}
  @state()
  _{{camel_case field_name}}: Array<{{> (concat field_type "/type") }} | undefined> = this.current{{pascal_case ../entry_type.name}}.{{snake_case field_name}};

      {{/if}}
    {{/if}}
  {{/each}}

  is{{pascal_case entry_type.name}}Valid() {
    return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && this._{{camel_case field_name}}{{/if}}{{#if (eq cardinality "vector")}} && this._{{camel_case field_name}}.all(e => e !== undefined){{/if}}{{/if}}{{/each}};
  }

  @contextProvided({ context: appWebsocketContext })
  appWebsocket!: AppWebsocket;

  @contextProvided({ context: appInfoContext })
  appInfo!: InstalledAppInfo;

  async update{{pascal_case entry_type.name}}() {
    const cellData = this.appInfo.cell_data.find((c: InstalledCell) => c.role_id === '{{dna_role_id}}')!;

    const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = { 
    {{#each entry_type.fields}}
      {{#if widget}}
        {{#if (eq cardinality "single") }}
      {{snake_case field_name}}: this._{{camel_case field_name}}!,
        {{else}}
      {{snake_case field_name}}: this._{{camel_case field_name}},
        {{/if}}
      {{/if}}
    {{/each}}
    {{#each entry_type.fields}}
      {{#if (not widget)}}
      {{snake_case field_name}}: this.current{{pascal_case ../entry_type.name}}.{{snake_case field_name}},
      {{/if}}
    {{/each}}
    };

    try {
      const updateRecord: Record = await this.appWebsocket.callZome({
        cap_secret: null,
        cell_id: cellData.cell_id,
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'update_{{snake_case entry_type.name}}',
        payload: {
          {{#if link_from_original_to_each_update}}
          original_{{snake_case entry_type.name}}_hash: this.original{{pascal_case entry_type.name}}Hash,
          {{/if}}
          previous_{{snake_case entry_type.name}}_hash: this.record.signed_action.hashed.hash,
          updated_{{snake_case entry_type.name}}: {{camel_case entry_type.name}}
        },
        provenance: cellData.cell_id[1]
      });
  
      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-updated', {
        composed: true,
        bubbles: true,
        detail: {
          {{#if link_from_original_to_each_update}}
          original{{pascal_case entry_type.name}}Hash: this.original{{pascal_case entry_type.name}}Hash,
          {{/if}}
          previous{{pascal_case entry_type.name}}Hash: this.record.signed_action.hashed.hash,
          updated{{pascal_case entry_type.name}}Hash: updateRecord.signed_action.hashed.hash
        }
      }));
    } catch (e: any) {
      const errorSnackbar = this.shadowRoot?.getElementById('update-error') as Snackbar;
      errorSnackbar.labelText = `Error updating the {{lower_case entry_type.name}}: ${e.data.data}`;
      errorSnackbar.show();
    }
  }

  render() {
    return html`
      <mwc-snackbar id="update-error" leading>
      </mwc-snackbar>

      <div style="display: flex; flex-direction: column">
        <span style="font-size: 18px">Edit {{title_case entry_type.name}}</span>
        {{#each entry_type.fields}}
          {{#if widget}}
            {{#if (not (eq cardinality "vector") )}}
        {{> (concat field_type "/" widget "/edit/render") label=(title_case field_name) initial_value_variable=(concat "this._" (camel_case field_name) ) variable_to_change=(concat "this._" (camel_case field_name) ) }}
            {{else}}
        {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
            {{/if}}
          {{/if}}

        {{/each}}


        <div style="display: flex; flex-direction: row">
          <mwc-button
            outlined
            label="Cancel"
            @click=${() => this.dispatchEvent(new CustomEvent('edit-canceled', {
              bubbles: true,
              composed: true
            }))}
            style="flex: 1;
          ></mwc-button>
          <mwc-button 
            raised
            label="Save"
            .disabled=${!this.is{{pascal_case entry_type.name}}Valid()}
            @click=${() => this.update{{pascal_case entry_type.name}}()}
            style="flex: 1;
          ></mwc-button>
        </div>
      </div>`;
  }
}
