use std::collections::BTreeMap;

use ::fixt::*;
use hdk::prelude::*;
use holochain::test_utils::consistency_10s;
use holochain::{conductor::config::ConductorConfig, sweettest::*};

use {{snake_case coordinator_zome_manifest.name}}_integrity::*;

{{#each entry_type.fields}}
  {{#if linked_from}}
    {{#if (ne linked_from.hash_type "AgentPubKey")}}
      {{#if (ne (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
mod {{snake_case ../entry_type.name}};
use {{snake_case ../entry_type.name}}::{create_{{snake_case linked_from.name}}, sample_{{snake_case linked_from.name}}_1, sample_{{snake_case linked_from.name}}_2};
      {{/if}}
    {{/if}}
  {{/if}}
{{/each}}

pub async fn sample_{{snake_case entry_type.name}}_1(conductor: &SweetConductor, zome: &SweetZome) -> {{pascal_case entry_type.name}} {
    {{pascal_case entry_type.name}} {
{{#each entry_type.fields}}
  {{#if linked_from}}
    {{#if (ne linked_from.hash_type "AgentPubKey")}}
      {{#if (eq cardinality "vector")}}
        {{#if (eq (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
          {{field_name}}: vec![],
        {{else}}
          {{#if (eq linked_from.hash_type "ActionHash")}}
          {{field_name}}: vec![create_{{snake_case linked_from.name}}(conductor, zome, sample_{{snake_case linked_from.name}}_1(conductor, zome)).await.signed_action.hashed.hash],
          {{else}}
          {{field_name}}: vec![create_{{snake_case linked_from.name}}(conductor, zome, sample_{{snake_case linked_from.name}}_1(conductor, zome)).await.signed_action.hashed.content.entry_hash().unwrap().clone()],
          {{/if}}
        {{/if}}
      {{else}}
        {{#if (eq (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
          {{field_name}}: None,
        {{else}}
	  {{#if (eq linked_from.hash_type "ActionHash")}}
          {{field_name}}: create_{{snake_case linked_from.name}}(conductor, zome, sample_{{snake_case linked_from.name}}_1(conductor, zome)).await.signed_action.hashed.hash,
          {{else}}
          {{field_name}}: create_{{snake_case linked_from.name}}(conductor, zome, sample_{{snake_case linked_from.name}}_1(conductor, zome)).await.signed_action.hashed.content.entry_hash().unwrap().clone(),
          {{/if}}
        {{/if}}
      {{/if}}
    {{else}}
          {{field_name}}: zome.cell_id().agent_pubkey().clone(),
    {{/if}}
  {{else}}
      {{#if (eq cardinality "vector")}}
	  {{field_name}}: vec![{{> (concat field_type "/sample1")}}],
      {{else}}
	  {{field_name}}: {{> (concat field_type "/sample1")}},
      {{/if}}
  {{/if}}
{{/each}}
    }
}

pub async fn sample_{{snake_case entry_type.name}}_2(conductor: &SweetConductor, zome: &SweetZome) -> {{pascal_case entry_type.name}} {
    {{pascal_case entry_type.name}} {
{{#each entry_type.fields}}
  {{#if linked_from}}
    {{#if (ne linked_from.hash_type "AgentPubKey")}}
      {{#if (eq cardinality "vector")}}
        {{#if (eq (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
          {{field_name}}: vec![],
        {{else}}
          {{#if (eq linked_from.hash_type "ActionHash")}}
          {{field_name}}: vec![create_{{snake_case linked_from.name}}(conductor, zome, sample_{{snake_case linked_from.name}}_2(conductor, zome)).await.signed_action.hashed.hash],
          {{else}}
          {{field_name}}: vec![create_{{snake_case linked_from.name}}(conductor, zome, sample_{{snake_case linked_from.name}}_2(conductor, zome)).await.signed_action.hashed.content.entry_hash().unwrap().clone()],
          {{/if}}
        {{/if}}
      {{else}}
        {{#if (eq (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
          {{field_name}}: None,
        {{else}}
	  {{#if (eq linked_from.hash_type "ActionHash")}}
          {{field_name}}: create_{{snake_case linked_from.name}}(conductor, zome, sample_{{snake_case linked_from.name}}_2(conductor, zome)).await.signed_action.hashed.hash,
          {{else}}
          {{field_name}}: create_{{snake_case linked_from.name}}(conductor, zome, sample_{{snake_case linked_from.name}}_2(conductor, zome)).await.signed_action.hashed.content.entry_hash().unwrap().clone(),
          {{/if}}
        {{/if}}
      {{/if}}
    {{else}}
          {{field_name}}: zome.cell_id().agent_pubkey().clone(),
    {{/if}}
  {{else}}
      {{#if (eq cardinality "vector")}}
	  {{field_name}}: vec![{{> (concat field_type "/sample2")}}],
      {{else}}
	  {{field_name}}: {{> (concat field_type "/sample2")}},
      {{/if}}
  {{/if}}
{{/each}}
    }
}

pub async fn create_{{snake_case entry_type.name}}(conductor: &SweetConductor, zome: &SweetZome, {{snake_case entry_type.name}}: {{pascal_case entry_type.name}}) -> Record {
    let record: Record = conductor
        .call(zome, "create_{{snake_case entry_type.name}}", {{snake_case entry_type.name}})
        .await;
    record
}

#[tokio::test(flavor = "multi_thread")]
async fn create_{{snake_case entry_type.name}}() {
    // Use prebuilt dna file
    let dna_path = std::env::current_dir()
        .unwrap()
        .join("../dnas/{{dna_role_name}}/workdir/{{dna_role_name}}.dna");
    let dna = SweetDnaFile::from_bundle(&dna_path).await.unwrap();

    // Set up conductors
    let mut conductors = SweetConductorBatch::from_config(2, ConductorConfig::default()).await;
    let apps = conductors.setup_app("{{dna_role_name}}", &[dna]).await.unwrap();
    conductors.exchange_peer_info().await;

    let ((alice,), (bobbo,)) = apps.into_tuples();
    
    let alice_zome = alice.zome("{{snake_case coordinator_zome_manifest.name}}");
    let bob_zome = bob.zome("{{snake_case coordinator_zome_manifest.name}}");
    
    let sample = sample_{{snake_case entry_type.name}}_1(&conductors[0], &alice_zome).await;
    
    // Alice creates a {{pascal_case entry_type.name}}
    let record: Record = create_{{snake_case entry_type.name}}(&conductors[0], &alice_zome, sample).await;
    let entry: {{pascal_case entry_type.name}} = record.entry().to_app_option().unwrap();
    assert_eq!(entry, sample);
}


#[tokio::test(flavor = "multi_thread")]
async fn create_and_read_{{snake_case entry_type.name}}() {
    // Use prebuilt dna file
    let dna_path = std::env::current_dir()
        .unwrap()
        .join("../dnas/{{dna_role_name}}/workdir/{{dna_role_name}}.dna");
    let dna = SweetDnaFile::from_bundle(&dna_path).await.unwrap();

    // Set up conductors
    let mut conductors = SweetConductorBatch::from_config(2, ConductorConfig::default()).await;
    let apps = conductors.setup_app("{{dna_role_name}}", &[dna]).await.unwrap();
    conductors.exchange_peer_info().await;

    let ((alice,), (bobbo,)) = apps.into_tuples();
    
    let alice_zome = alice.zome("{{snake_case coordinator_zome_manifest.name}}");
    let bob_zome = bob.zome("{{snake_case coordinator_zome_manifest.name}}");
    
    let sample = sample_{{snake_case entry_type.name}}_1(&conductors[0], &alice_zome).await;
    
    // Alice creates a {{pascal_case entry_type.name}}
    let record: Record = create_{{snake_case entry_type.name}}(&conductors[0], &alice_zome, sample.clone()).await;
    
    consistency_10s([&alice, &bobbo]).await;
    
    let get_record: Option<Record> = conductors[1]
        .call(&bob_zome, "get_{{snake_case entry_type.name}}", record.action_hash().clone())
        .await;
        
    assert_eq!(record, get_record.unwrap());    
}

{{#if crud.update}}
#[tokio::test(flavor = "multi_thread")]
async fn create_and_update_{{snake_case entry_type.name}}() {
    // Use prebuilt dna file
    let dna_path = std::env::current_dir()
        .unwrap()
        .join("../dnas/{{dna_role_name}}/workdir/{{dna_role_name}}.dna");
    let dna = SweetDnaFile::from_bundle(&dna_path).await.unwrap();

    // Set up conductors
    let mut conductors = SweetConductorBatch::from_config(2, ConductorConfig::default()).await;
    let apps = conductors.setup_app("{{dna_role_name}}", &[dna]).await.unwrap();
    conductors.exchange_peer_info().await;

    let ((alice,), (bobbo,)) = apps.into_tuples();
    
    let alice_zome = alice.zome("{{snake_case coordinator_zome_manifest.name}}");
    let bob_zome = bob.zome("{{snake_case coordinator_zome_manifest.name}}");
    
    let sample_1 = sample_{{snake_case entry_type.name}}_1(&conductors[0], &alice_zome).await;
    
    // Alice creates a {{pascal_case entry_type.name}}
    let record: Record = create_{{snake_case entry_type.name}}(&conductors[0], &alice_zome, sample_1.clone()).await;
    let original_action_hash = record.signed_action.hashed.hash;
        
    consistency_10s([&alice, &bobbo]).await;
    
    let sample_2 = sample_{{snake_case entry_type.name}}_2(&conductors[0], &alice_zome).await;
    let input = Update{{pascal_case entry_type.name}}Input {
{{#if link_from_original_to_each_update}}
      original_{{snake_case entry_type.name}}_hash: original_action_hash.clone(),
{{/if}}
      previous_{{snake_case entry_type.name}}_hash: original_action_hash,
      updated_{{snake_case entry_type.name}}: sample_2.clone(),
    };
    
    // Alice updates the {{pascal_case entry_type.name}}
    let update_record: Record = conductors[0]
        .call(&alice_zome, "update_{{snake_case entry_type.name}}", input)
        .await;
        
    let entry: {{pascal_case entry_type.name}} = update_record.entry().to_app_option().unwrap();
    assert_eq!(sample_2, entry);
    
    consistency_10s([&alice, &bobbo]).await;
    
    let get_record: Option<Record> = conductors[1]
        .call(&bob_zome, "get_{{snake_case entry_type.name}}", original_action_hash.clone())
        .await;
  
    assert_eq!(update_record, get_record.unwrap());
    
    let input = Update{{pascal_case entry_type.name}}Input {
{{#if link_from_original_to_each_update}}
      original_{{snake_case entry_type.name}}_hash: original_action_hash.clone(),
{{/if}}
      previous_{{snake_case entry_type.name}}_hash: update_record.signed_hashed.hashed.hash.clone(),
      updated_{{snake_case entry_type.name}}: sample_1.clone(),
    };
    
    // Alice updates the {{pascal_case entry_type.name}} again
    let update_record: Record = conductors[0]
        .call(&alice_zome, "update_{{snake_case entry_type.name}}", input)
        .await;
        
    let entry: {{pascal_case entry_type.name}} = update_record.entry().to_app_option().unwrap();
    assert_eq!(sample_1, entry);
    
    consistency_10s([&alice, &bobbo]).await;
    
    let get_record: Option<Record> = conductors[1]
        .call(&bob_zome, "get_{{snake_case entry_type.name}}", original_action_hash.clone())
        .await;
  
    assert_eq!(update_record, get_record.unwrap());
}
{{/if}}

{{#if crud.delete}}
#[tokio::test(flavor = "multi_thread")]
async fn create_and_update_{{snake_case entry_type.name}}() {
    // Use prebuilt dna file
    let dna_path = std::env::current_dir()
        .unwrap()
        .join("../dnas/{{dna_role_name}}/workdir/{{dna_role_name}}.dna");
    let dna = SweetDnaFile::from_bundle(&dna_path).await.unwrap();

    // Set up conductors
    let mut conductors = SweetConductorBatch::from_config(2, ConductorConfig::default()).await;
    let apps = conductors.setup_app("{{dna_role_name}}", &[dna]).await.unwrap();
    conductors.exchange_peer_info().await;

    let ((alice,), (bobbo,)) = apps.into_tuples();
    
    let alice_zome = alice.zome("{{snake_case coordinator_zome_manifest.name}}");
    let bob_zome = bob.zome("{{snake_case coordinator_zome_manifest.name}}");
    
    let sample_1 = sample_{{snake_case entry_type.name}}_1(&conductors[0], &alice_zome).await;
    
    // Alice creates a {{pascal_case entry_type.name}}
    let record: Record = create_{{snake_case entry_type.name}}(&conductors[0], &alice_zome, sample_1.clone()).await;
    let original_action_hash = record.signed_action.hashed.hash;
        
    consistency_10s([&alice, &bobbo]).await;
    
    // Alice deletes the {{pascal_case entry_type.name}}
    let _delete_record: Record = conductors[0]
        .call(&alice_zome, "delete_{{snake_case entry_type.name}}", original_action_hash.clone())
        .await;
    
    let get_record: Option<Record> = conductors[1]
        .call(&bob_zome, "get_{{snake_case entry_type.name}}", original_action_hash.clone())
        .await;
        
    assert!(get_record.is_none());
}
{{/if}}
