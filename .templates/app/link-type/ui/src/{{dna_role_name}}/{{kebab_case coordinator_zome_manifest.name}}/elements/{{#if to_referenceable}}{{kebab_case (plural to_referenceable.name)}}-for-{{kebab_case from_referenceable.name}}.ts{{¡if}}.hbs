import { LitElement, html } from 'lit';
import { state, property, customElement } from 'lit/decorators.js';
import { AgentPubKey, EntryHash, ActionHash, Record } from '@holochain/client';
import { consume } from '@lit-labs/context';
import { hashProperty, sharedStyles, DisplayError } from '@holochain-open-dev/elements';
import { StoreSubscriber } from '@holochain-open-dev/stores';
import { CircularProgress } from '@scoped-elements/material-web';
import { ScopedElementsMixin } from '@open-wc/scoped-elements';
import { localized, msg } from '@lit/localize';

{{#if (not (eq to_referenceable.hash_type "AgentPubKey") )}}
import { {{pascal_case to_referenceable.name}}Summary } from './{{kebab_case to_referenceable.name}}-summary';
{{else}}
import { AgentAvatar } from '@holochain-open-dev/profiles';
{{/if}}
import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context';

@localized()
export class {{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}} extends ScopedElementsMixin(LitElement) {

  // REQUIRED. The {{pascal_case from_referenceable.singular_arg}} for which the {{plural (pascal_case to_referenceable.name)}} should be fetched
  @property(hashProperty('{{kebab_case from_referenceable.singular_arg}}'))
  {{camel_case from_referenceable.singular_arg}}!: {{from_referenceable.hash_type}}; 

  /**
   * @internal
   */
  @consume({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;

  /**
   * @internal
   */
  _{{camel_case (plural to_referenceable.name)}} = new StoreSubscriber(this,
    () => this.{{camel_case coordinator_zome_manifest.name}}Store.{{camel_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}.get(this.{{camel_case from_referenceable.singular_arg}})
  );

  renderList(hashes: Array<{{to_referenceable.hash_type}}>) {
    if (hashes.length === 0) return html`<span>${msg("No {{lower_case (plural to_referenceable.name)}} found for this {{lower_case from_referenceable.name}}")}</span>`;
    
    return html`
      <div style="display: flex; flex-direction: column">
        ${hashes.map(hash => 
      {{#if (not (eq to_referenceable.hash_type "AgentPubKey") )}}
          html`<{{kebab_case to_referenceable.name}}-summary .{{camel_case to_referenceable.name}}Hash=${hash} style="margin-bottom: 16px;" ></{{kebab_case to_referenceable.name}}-summary>`
      {{else}}
          html`<agent-avatar .agentPubKey=${hash}></agent-avatar>`
      {{/if}}
        )}
      </div>
    `;
  }

  render() {
    switch (this._{{camel_case (plural to_referenceable.name)}}.value.status) {
      case "pending":
        return html`<div
          style="display: flex; flex: 1; align-items: center; justify-content: center"
        >
          <mwc-circular-progress indeterminate></mwc-circular-progress>
        </div>`;
      case "complete":
        return this.renderList(this._{{camel_case (plural to_referenceable.name)}}.value.value);
      case "error":
        return html`<display-error
          .error=${this._{{camel_case (plural to_referenceable.name)}}.value.error.data.data}
        ></display-error>`;
    }
  }

  static get scopedElements() {
    return {
      'mwc-circular-progress': CircularProgress,
      'display-error': DisplayError,
      {{#if (not (eq to_referenceable.hash_type "AgentPubKey") )}}
      '{{kebab_case to_referenceable.name}}-summary': {{pascal_case to_referenceable.name}}Summary,
      {{else}}
      'agent-avatar': AgentAvatar
      {{/if}}
    };
  }
  
  static styles = [sharedStyles];
}
