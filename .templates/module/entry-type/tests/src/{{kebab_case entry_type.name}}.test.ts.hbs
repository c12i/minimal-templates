import { assert, test } from "vitest";

import { runScenario, pause, CallableCell } from '@holochain/tryorama';
import { NewEntryAction, ActionHash, Record, AppBundleSource, fakeDnaHash, fakeActionHash, fakeAgentPubKey, fakeEntryHash } from '@holochain/client';
import { decode } from '@msgpack/msgpack';
import { EntryRecord } from '@holochain-open-dev/utils';
import { toPromise } from '@holochain-open-dev/stores';

import { sample{{pascal_case entry_type.name}} } from './common.js';

test('create {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    const { alice, bob } = await setup(scenario);

    // Alice creates a {{pascal_case entry_type.name}}
    const {{camel_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}> = await alice.store.client.create{{pascal_case entry_type.name}}(sample{{pascal_case entry_type.name}}());
    assert.ok({{camel_case entry_type.name}});
  });
});

test('create and read {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    const { alice, bob } = await setup(scenario);

    const sample = sample{{pascal_case entry_type.name}}();

    // Alice creates a {{pascal_case entry_type.name}}
    const {{camel_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}> = await alice.store.client.create{{pascal_case entry_type.name}}();
    assert.ok({{camel_case entry_type.name}});

    // Wait for the created entry to be propagated to the other node.
    await dhtSync(
      [alice.player, bob.player],
      alice.player.cells[0].cell_id[0]
    );

    // Bob gets the created {{pascal_case entry_type.name}}
    const createReadOutput: EntryRecord<{{pascal_case entry_type.name}}> = await bob.store.{{camel_case (plural entry_type.name)}}.get({{#if entry_type.reference_entry_hash}}({{camel_case entry_type.name}}.entryHash{{else}}{{camel_case entry_type.name}}.actionHash{{/if}});
    assert.deepEqual(sample, createReadOutput.entry);
  });
});

{{#if crud.update}}
test('create and update {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    const { alice, bob } = await setup(scenario);

    // Alice creates a {{pascal_case entry_type.name}}
    const {{camel_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}> = await alice.store.client.create{{pascal_case entry_type.name}}(sample{{pascal_case entry_type.name}}());
    assert.ok({{camel_case entry_type.name}});
        
    const originalActionHash = {{camel_case entry_type.name}}.actionHash;
 
    // Alice updates the {{pascal_case entry_type.name}}
    let contentUpdate = sample{{pascal_case entry_type.name}}();
    let updateInput = {
{{#if link_from_original_to_each_update}}
      original_{{snake_case entry_type.name}}_hash: originalActionHash,
{{/if}}
      previous_{{snake_case entry_type.name}}_hash: originalActionHash,
      updated_{{snake_case entry_type.name}}: contentUpdate,
    };

    let updated{{pascal_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}> = await alice.store.client.update{{pascal_case entry_type.name}}(updateInput);
    assert.ok(updated{{pascal_case entry_type.name}});

    // Wait for the created entry to be propagated to the other node.
    await dhtSync(
      [alice.player, bob.player],
      alice.player.cells[0].cell_id[0]
    );
        
    // Bob gets the updated {{pascal_case entry_type.name}}
    const readUpdatedOutput0: EntryRecord<{{pascal_case entry_type.name}}> = await bob.store.{{camel_case (plural entry_type.name)}}.get({{#if entry_type.reference_entry_hash}}({{camel_case entry_type.name}}.entryHash{{else}}{{camel_case entry_type.name}}.actionHash{{/if}});
    assert.deepEqual(contentUpdate, readUpdatedOutput0.entry);

    // Alice updates the {{pascal_case entry_type.name}} again
    contentUpdate = sample{{pascal_case entry_type.name}}();
    updateInput = { 
{{#if link_from_original_to_each_update}}
      original_{{snake_case entry_type.name}}_hash: originalActionHash,
{{/if}}
      previous_{{snake_case entry_type.name}}_hash: updatedRecord.actionHash,
      updated_{{snake_case entry_type.name}}: contentUpdate,
    };

    updated{{pascal_case entry_type.name}} = await alice.store.client.update{{pascal_case entry_type.name}}(updateInput);
    assert.ok(updated{{pascal_case entry_type.name}});

    // Wait for the created entry to be propagated to the other node.
    await dhtSync(
      [alice.player, bob.player],
      alice.player.cells[0].cell_id[0]
    );
        
    // Bob gets the updated {{pascal_case entry_type.name}}
    const readUpdatedOutput1: EntryRecord<{{pascal_case entry_type.name}}> = await bob.store.{{camel_case (plural entry_type.name)}}.get({{#if entry_type.reference_entry_hash}}(updatedRecord.entryHash{{else}}updatedRecord.actionHash{{/if}});
    assert.deepEqual(contentUpdate, readUpdatedOutput1.entry);
  });
});
{{/if}}

{{#if crud.delete}}
test('create and delete {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    const { alice, bob } = await setup(scenario);

    // Alice creates a {{pascal_case entry_type.name}}
    const {{camel_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}> = await alice.store.client.create{{pascal_case entry_type.name}}(sample{{pascal_case entry_type.name}}());
    assert.ok({{camel_case entry_type.name}});
        
    // Alice deletes the {{pascal_case entry_type.name}}
    const deleteActionHash = await alice.store.client.delete{{pascal_case entry_type.name}}({{camel_case entry_type.name}}.actionHash));
    assert.ok(deleteActionHash);

    // Wait for the created entry to be propagated to the other node.
    await dhtSync(
      [alice.player, bob.player],
      alice.player.cells[0].cell_id[0]
    );
        
    // Bob tries to get the deleted {{pascal_case entry_type.name}}
    try {
      const readDeletedOutput: EntryRecord<{{pascal_case entry_type.name}}> = await bob.store.{{camel_case (plural entry_type.name)}}.get({{#if entry_type.reference_entry_hash}}({{camel_case entry_type.name}}.entryHash{{else}}{{camel_case entry_type.name}}.actionHash{{/if}});
      assert.ok(false);
    } catch (e) {
      assert.ok(true);
    }
  });
});
{{/if}}
