{{previous_file_content}}

export async function sample{{pascal_case entry_type.name}}(
{{#each entry_type.fields}}
  {{#if linked_from}}
    {{#if (eq cardinality "vector")}}
      {{field_name}}: Array<{{linked_from.hash_type}}>,
    {{else}}
      {{#if (eq cardinality "vector")}}
        {{field_name}}: {{linked_from.hash_type}} | undefined,
      {{else}}
        {{field_name}}: {{linked_from.hash_type}},
      {{/if}}
    {{/if}}
  {{/if}}
{{/each}}, partial{{pascal_case entry_type.name}}: Partial<{{pascal_case entry_type.name}}> = {}) {
    return {
        ...{
{{#each entry_type.fields}}
  {{#if linked_from}}
          {{field_name}},
  {{else}}
    {{#if (eq cardinality "vector")}}
          {{field_name}}: [{{> (concat field_type.type "/sample") field_type=field_type}}],
    {{else}}
          {{field_name}}: {{> (concat field_type.type "/sample") field_type=field_type}},
    {{/if}}
  {{/if}}
{{/each}}
        },
        ...partial{{pascal_case entry_type.name}}
    };
}

export async function create{{pascal_case entry_type.name}}(cell: CallableCell, {{camel_case entry_type.name}} = undefined): Promise<Record> {
    return cell.callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "create_{{snake_case entry_type.name}}",
      payload: {{camel_case entry_type.name}} || await sample{{pascal_case entry_type.name}}(cell),
    });
}

