{{#merge previous_file_content}}
  {{#match_scope (concat "export class " (pascal_case coordinator_zome_manifest.name) "Store {" ) }}
    {{#merge previous_scope_content}}
      {{#if (includes previous_file_content (concat (camel_case (plural from_referenceable.name)) " = new LazyHoloHashMap((" (camel_case from_referenceable.name) "Hash: " from_referenceable.hash_type ") => ({" ) ) }}
        {{#match_scope (concat (camel_case (plural from_referenceable.name)) " = new LazyHoloHashMap((" (camel_case from_referenceable.name) "Hash: " from_referenceable.hash_type ") => ({" ) }}
  {{previous_scope_content}}
      {{camel_case (plural to_referenceable.name)}}: {
        live: pipe(liveLinksStore(
          this.client,
          {{camel_case from_referenceable.singular_arg}},
          () => this.client.get{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}),
          '{{link_type_name}}'
        ), links => slice(this.{{camel_case (plural to_referenceable.name)}}, links.map(l => l.target))),
          {{#if delete}}
        deleted: pipe(deletedLinksStore(
          this.client,
          {{camel_case from_referenceable.singular_arg}},
          () => this.client.getDeleted{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}),
          '{{link_type_name}}'
        ), links => slice(this.{{camel_case (plural to_referenceable.name)}}, links.map(l => l[0].hashed.content.target_address))),
          {{/if}}
      },
        {{/match_scope}}
      {{else}}

  /** {{title_case (plural to_referenceable.name)}} for {{title_case from_referenceable.name}} */

  {{camel_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}} = new LazyHoloHashMap(({{camel_case from_referenceable.singular_arg}}: {{from_referenceable.hash_type}}) => ({
    live: pipe(
      liveLinksStore(
        this.client,
        {{camel_case from_referenceable.singular_arg}},
        () => this.client.get{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}),
        '{{link_type_name}}'
      ), 
    {{#if (eq to_referenceable.hash_type "AgentPubKey")}}
      links => links.map(l => retype(l.target, HashType.AGENT))
    {{else}}
      links => slice(this.{{camel_case (plural to_referenceable.name)}}, links.map(l => l.target))
    {{/if}}
    ),
        {{#if delete}}
    deleted: pipe(
      deletedLinksStore(
        this.client,
        {{camel_case from_referenceable.singular_arg}},
        () => this.client.getDeleted{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}),
        '{{link_type_name}}'
      ), 
    {{#if (eq to_referenceable.hash_type "AgentPubKey")}}
      links => links.map(l => retype(l[0].hashed.content.target_address, HashType.AGENT))
    {{else}}
      links => slice(this.{{camel_case (plural to_referenceable.name)}}, links.map(l => l[0].hashed.content.target_address))
    {{/if}}
    ),
        {{/if}}
  });
      {{/if}}

      {{#if bidireccional}}
        {{#if (includes previous_file_content (concat (camel_case (plural to_referenceable.name)) " = new LazyHoloHashMap((" (camel_case to_referenceable.name) "Hash: " to_referenceable.hash_type ") => ({" ) ) }}
          {{#match_scope (concat (camel_case (plural to_referenceable.name)) " = new LazyHoloHashMap((" (camel_case to_referenceable.name) "Hash: " to_referenceable.hash_type ") => ({" ) }}
  {{previous_scope_content}}
      {{camel_case (plural from_referenceable.name)}}: {
        live: pipe(
          liveLinksStore(
            this.client,
            {{camel_case to_referenceable.singular_arg}},
            () => this.client.get{{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}({{camel_case to_referenceable.singular_arg}}),
            '{{link_type_name}}'
          ), 
          links => slice(this.{{camel_case (plural from_referenceable.name)}}, links.map(l => l.target))
        ),
            {{#if delete}}
        deleted: pipe(
          deletedLinksStore(
            this.client,
            {{camel_case to_referenceable.singular_arg}},
            () => this.client.getDeleted{{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}({{camel_case to_referenceable.singular_arg}}),
            '{{link_type_name}}'
          ), links => slice(this.{{camel_case (plural from_referenceable.name)}}, links.map(l => l[0].hashed.content.target_address))
        ),
            {{/if}}
      },
          {{/match_scope}}
        {{else}}

  /** {{title_case (plural from_referenceable.name)}} for {{title_case to_referenceable.name}} */

  {{camel_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}} = new LazyHoloHashMap(({{camel_case to_referenceable.singular_arg}}: {{to_referenceable.hash_type}}) => ({
    live: pipe(
      liveLinksStore(
        this.client,
        {{camel_case to_referenceable.singular_arg}},
        () => this.client.get{{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}({{camel_case to_referenceable.singular_arg}}),
        '{{link_type_name}}'
      ), 
    {{#if (eq from_referenceable.hash_type "AgentPubKey")}}
      links => links.map(l => retype(l.target, HashType.AGENT))
    {{else}}
      links => slice(this.{{camel_case (plural from_referenceable.name)}}, links.map(l => l.target))
    {{/if}}
    ),
        {{#if delete}}
    deleted: pipe(
      deletedLinksStore(
        this.client,
        {{camel_case to_referenceable.singular_arg}},
        () => this.client.getDeleted{{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}({{camel_case to_referenceable.singular_arg}}),
        '{{link_type_name}}'
      ), 
    {{#if (eq from_referenceable.hash_type "AgentPubKey")}}
      links => links.map(l => retype(l[0].hashed.content.target_address, HashType.AGENT))
    {{else}}
      links => slice(this.{{camel_case (plural from_referenceable.name)}}, links.map(l => l[0].hashed.content.target_address))
    {{/if}}
    ),
        {{/if}}
  });
        {{/if}}
      {{/if}}
    {{/merge}}
  {{/match_scope}}
{{/merge}}
