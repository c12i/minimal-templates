import { assert, test } from "vitest";

import { runScenario, dhtSync } from '@holochain/tryorama';
import { ActionHash, Record } from '@holochain/client';
import { decode } from '@msgpack/msgpack';
import { EntryRecord } from '@holochain-open-dev/utils';
import { toPromise } from '@holochain-open-dev/stores';

import { {{pascal_case referenceable.name}} } from '../../ui/src/types.js';
import { sample{{pascal_case referenceable.name}} } from '../../ui/src/mocks.js';
import { setup } from './common.js';

test('create a {{pascal_case referenceable.name}} and get {{lower_case collection_name}}', async () => {
  await runScenario(async scenario => {
    const { alice, bob } = await setup(scenario);

    // Bob gets {{lower_case collection_name}}
    let collectionOutput: ActionHash[] = await toPromise(bob.store.{{camel_case collection_name}});
    assert.equal(collectionOutput.length, 0);

    // Alice creates a {{pascal_case referenceable.name}}
    const {{camel_case referenceable.name}}: EntryRecord<{{pascal_case referenceable.name}}> = await bob.store.client.create{{pascal_case referenceable.name}}(await sample{{pascal_case referenceable.name}}(alice.store.client));
    assert.ok({{camel_case referenceable.name}});
    
    await dhtSync(
      [alice.player, bob.player],
      alice.player.cells[0].cell_id[0]
    );
    
    // Bob gets {{lower_case collection_name}} again
    collectionOutput = await toPromise(bob.store.{{camel_case collection_name}});
    assert.equal(collectionOutput.length, 1);
    assert.deepEqual({{camel_case referenceable.name}}.actionHash, collectionOutput[0]);    
  });
});

