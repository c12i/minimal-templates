import { LitElement, html } from 'lit';
import { state, property, customElement } from 'lit/decorators.js';
import { InstalledCell, AgentPubKey, EntryHash, ActionHash, Record, AppWebsocket, InstalledAppInfo } from '@holochain/client';
import { contextProvided } from '@lit-labs/context';
import { TaskSubscriber } from 'lit-svelte-stores';
import { CircularProgress } from '@scoped-elements/material-web';
import { ScopedElementsMixin } from '@open-wc/scoped-elements';

import { {{pascal_case referenceable.name}} } from './{{kebab_case this}}-detail';
import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context';

export class {{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}} extends ScopedElementsMixin(LitElement) {

  @property({
    hasChanged: (newVal: {{from_referenceable.hash_type}}, oldVal: {{from_referenceable.hash_type}}) => newVal.toString() !== oldVal.toString()
  })
  {{camel_case from_referenceable.singular_arg}}!: {{from_referenceable.hash_type}}; 

  @contextProvided({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;

  _fetch{{pascal_case (plural to_referenceable.name)}} = new TaskSubscriber(this,
    ([{{camel_case from_referenceable.singular_arg}}]) => this.{{camel_case coordinator_zome_manifest.name}}Store.fetch{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}), 
    () => [this.{{camel_case from_referenceable.singular_arg}}]
  );

  renderList(hashes: Array<{{to_referenceable.hash_type}}>) {
    if (hashes.length === 0) return html`<span>No {{lower_case (plural to_referenceable.name)}} found for this {{lower_case from_referenceable.name}}</span>`;
    
    return html`
      <div style="display: flex; flex-direction: column">
        ${hashes.map(hash => 
          html`<{{kebab_case to_referenceable.name}}-detail .{{camel_case to_referenceable.name}}Hash=${hash} style="margin-bottom: 16px;"></{{kebab_case to_referenceable.name}}-detail>`
        )}
      </div>
    `;
  }

  render() {
    return this._fetch{{pascal_case (plural to_referenceable.name)}}.render({
      pending: () => html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
        <mwc-circular-progress indeterminate></mwc-circular-progress>
      </div>`,
      complete: (hashes) => this.renderList(hashes),
      error: (e: any) => html`<span>Error fetching the {{lower_case (plural to_referenceable.name)}}: ${e.data.data}.</span>`
    });
  }

  static get scopedElements() {
    return {
      'mwc-circular-progress': CircularProgress,
      '{{kebab_case entry_type.name}}-detail': {{pascal_case entry_type.name}}Detail
    };
  }
}
